# Touch-controlled music sequencer


#--------------------------------------------------------------------------
# PART I: The pad-controlled sequencer
#

# Configure various constants that we need, these define the number of
# beats in our loop, the number of sub-beats within each of these and
# the timing of the loop
#
NUM_PADS = 12
NUM_BEATS = 4
NUM_SUB_BEATS = 8
TOTAL_SUB_BEATS = NUM_BEATS * NUM_SUB_BEATS
SUB_BEAT_DURATION = 1.0 / NUM_SUB_BEATS

# These are the 6 notes that we will play from the piano part of the pad
#
NOTES = scale(:c3, :major)

# These are the 6 samples that we will play from the drum part of the pad
#
SAMPLES = [:bd_haus, :sn_dolf, :perc_snap, :perc_snap2, :elec_cymbal, :elec_triangle]

# This function takes the number of the pad (0-11) as an argument and
# either plays the appropriate note or the appropriate sample from the
# ones above. You can change the synth and add effects in this function.
#
def trigger(number)
  with_fx :wobble do
    use_synth :sine
    use_synth_defaults amp: 2, sustain: SUB_BEAT_DURATION

    if number < 6
      # Play the right note from the NOTES variable
      play NOTES[number]
    elsif number >= 6
      # Play the right sample from the SAMPLES variable, remember that
      # the variable is indexed from 0..5 and that `number` is 6..11
      sample SAMPLES[number - 6]
    end
  end
end

# Our sequencer pattern is an array of arrays, or a matrix, where
# the inner dimension (the columns) is the different sub-beats and
# the outer dimension (the rows) is the different notes/samples. We fill
# the pattern with `false` values to mean that nothing should be played
# in the beginning.
#
pattern = Array.new(NUM_PADS) { Array.new(TOTAL_SUB_BEATS, false) }

# This variable remembers the current sub-beat index into the pattern
#
sub_beat = 0

# This loop listens for pad cues, extracts the pad number from the
# cue message and sets the appropriate element of the `pattern`
# matrix to `true`
#
live_loop :pads do
  loop do
    message = sync :pad
    number = message[:number]
    pattern[number][sub_beat] = true
  end
end

# This loop plays each of the notes or samples that are marked in the
# pattern for the current sub-beat and then moves the sub-beat index
# on to the next sub-beat and waits the duration of a single sub-beat
#
live_loop :sequencer do
  loop do
    # Play a metronome tick at the beginning of each beat, which is
    # every NUM_SUB_BEATS sub-beats
    #
    if sub_beat % NUM_SUB_BEATS == 0
      sample :elec_tick, amp: 0.5
    end
    # Iterate through each of the pads checking to see if the pattern
    # has a `true` value set for the current sub-beat. We remember
    # in the `played` variable if we have played anything.
    #
    played = false
    for number in 0..NUM_PADS-1
      if pattern[number][sub_beat]
        # Play the appropriate sound and remember that we have played
        # something for later
        #
        trigger number
        played = true
      end
    end

    # If we played something above, then tell the light to move to the
    # next colour from the COLORS ring (see below) using the tick method
    #
    if played
      cue :light, :color, COLORS.tick
    end

    # Move to the next sub-beat index and sleep for a single sub-beat
    #
    sub_beat = (sub_beat + 1) % TOTAL_SUB_BEATS
    sleep SUB_BEAT_DURATION
  end
end


#--------------------------------------------------------------------------
# PART II: The *disco light*
#

# We'll want this later for communicating with the disco light
#
require 'socket'

# Define the colours that we will cycle through when samples/notes are
# played. The colours are hexadecimal RGB numbers like the ones you
# would find in HTML/CSS.
#
COLORS = ring(0xff0000, 0x888800, 0x00ff00, 0x008888, 0x0000ff, 0x880088)

# This loop listens for cues from the sequencer to change the light
# colour or position, and then sends the appropriate messages to
# the light controller process via a UDP network socket
#
live_loop :lights do
  client = UDPSocket.new
  client.connect "localhost", 9000

  loop do
    message = sync :light
    if message[:color]
      client.send "color " + message[:color].to_s(16), 0
    end
    if message[:tilt]
      client.send "tilt " + message[:tilt].to_s, 0
    end
    if message[:pan]
      client.send "pan " + message[:pan].to_s, 0
    end
  end
end